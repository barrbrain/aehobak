/*-
 * Copyright 2025 David Michael Barr
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted providing that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

use criterion::{criterion_group, criterion_main, Criterion, Throughput};
use std::hint::black_box;

fn criterion_benchmark(c: &mut Criterion) {
    let patch = ref_patch();
    let old = vec![0; 524288];
    let mut bspatch = Vec::with_capacity(524288);
    let mut new = Vec::with_capacity(524288);

    let mut group = c.benchmark_group("throughput");
    group.throughput(Throughput::Bytes(new.capacity() as u64));
    group.bench_function("memcpy", |b| {
        b.iter(|| {
            new.clear();
            new.extend(black_box(&old));
        })
    });
    group.bench_function("patch", |b| {
        b.iter(|| {
            new.clear();
            aehobak::patch(
                black_box(&old),
                black_box(&mut &*patch),
                black_box(&mut new),
            )
            .unwrap();
        })
    });
    group.bench_function("bspatch", |b| {
        bspatch.clear();
        aehobak::decode(black_box(&mut &*patch), black_box(&mut bspatch)).unwrap();
        b.iter(|| {
            new.clear();
            bsdiff::patch(
                black_box(&old),
                black_box(&mut bspatch.as_slice()),
                black_box(&mut new),
            )
            .unwrap();
        })
    });
    group.bench_function("decode-bspatch", |b| {
        b.iter(|| {
            new.clear();
            bspatch.clear();
            aehobak::decode(black_box(&mut &*patch), black_box(&mut bspatch)).unwrap();
            bsdiff::patch(
                black_box(&old),
                black_box(&mut bspatch.as_slice()),
                black_box(&mut new),
            )
            .unwrap();
        })
    });
    group.finish();
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);

fn ref_patch() -> Box<[u8]> {
    let mut patch = Vec::new();
    patch.extend(PATCH_HEX_0);
    patch.resize(173 * 64, b'0');
    patch.extend(PATCH_HEX_1);
    patch.resize(228 * 64, b'0');
    patch.extend(PATCH_HEX_2);
    patch
        .chunks_exact(2)
        .map(|xx| u8::from_str_radix(std::str::from_utf8(xx).unwrap(), 16).unwrap())
        .collect()
}

const PATCH_HEX_0: &[u8] = b"AAAB150801D104EA07";

const PATCH_HEX_1: &[u8] = b"\
0000000000000000000000000000000000000000EEF7FFEEEFFBFBFFFEFEBFFF\
EEFFBFFFEFFEFF7FBEEFFFF7F7FBBFBFFFFBFFBFFEFFFFFBFF7DDFFFFFFFEEEF\
FFFFFFFEFFFFFFFFEFFF7DDFFFFBFBFFFFFFEFBEBFFF5C555555555595555555\
5955555556555555555555555955555555555555555555555555555555555555\
5555555555555555555555555555555555555555555555555440555411440055\
5045501555110514151505045110141111515455510404150054555544105445\
4545559545501150050055555144105411151555545515540454571111041144\
0505110445104410144141111154115114105104454050500411545041451011\
4404444450414511155110551514414044101145040444401515504014111010\
0544414441041410451111044154555010044404110111111115505101111150\
0544044444114551115055455005114104111115514050141155540411044144\
1141104544040411110444115151450444440410114004014444404410111011\
0144041011454400555555555501151115155011151511104150504544544414\
5400511554501510145150541055451005411414514144404411141011445540\
1454440154555504110441041144400451055014454441044155444050444111\
4150550451104441111544044414410111415405444145011055155051151411\
4404111110415410511111051104010000000000000000000000000000000000";

const PATCH_HEX_2: &[u8] = b"\
087813B90F00E66DC4BD0B0011F405000238D40200BCC40100C4990100423D01\
002B620C00914801009E08E4B008005258D8B105002FA4090094A3080066D695\
4D01004FF90100D2480C3702002B4C05006ADE05006F92B7C801004DA30A00CC\
B40300D00A08003BEA0700C6E00600D009E4FF0100F39C080034A50500DD0EEA\
7A040029210300EDA309001EB50100727E040069C00400A4E8A0DA0300889606\
0063FC0A00B06401007B866C800800E34147A802003470040071160300EDA309\
001EB5010096FF08000A7601009DFB08006E32323F040049F20400A4ED09009B\
C00100418A0B0080E902009A1D26480800C168BF4D0D00583D0F00BDB9080040\
920500A972080030250B000B880500AC7706006D6B0A00CC620A008E65BA132C\
04005C3903002319A1440800AA2409004EC9E3F30100534A0300683D0300ADFE\
0300A14B0600BE00060001945001000F530700BE000600013F95060048B20C00\
CF1E06001004C36603001CC2030003A80700366C020084540200232BF43F0300\
D0E604009DCC04009FB860FD040019C50B00CA460100BA810500BC8F0400F352\
1DD0070076360500CDFA0600A73D010023600100BA7B0D00435B0B0079120100\
58F70600B20D2F0D4D11030086150300C9E70200FAE90200380C0300F7C40700\
A8EB0800F9F506001FBB0400793F0100B2D60300A27901001F4753310100C929\
020054820D00D744070017160700CE46020044206008007B3D09004408E80B00\
BBE503005B310208004C750A0025C30300A14B060046560700D7380100603401\
000F53070046560700D738010073B1060048B20C0047C904007A0137B9040075\
F5DC450400F54B0400700E08007AC59862010071F20E007E190200049408005E\
09030063680A00DEC00100DD26030008C80B00DDA70400EA0702006FC90500A1\
5C03007ED262BC0A00B9E7090058CA0900DB9C0B009EAD080045440100C84401\
005F630400CC670400293A0400743C0400A6BB01000BC7070035290400E41E06\
000796040091640100B2D60300BB290200126D0D0005A70B00D064C929020054\
820D00D744070017160700CE46020044206008007B3D09004408E80B00BBE503\
005B31020800D9B5020012BF0D0027570400A14B06000E1F0600870160340100\
0F5307000E1F0600870173B1060048B20C007F000600CA38010037B9040099DC\
01004D090200F4D20400CF660200722902009981040015C6010014710500CD75\
030060940700F8AC050056203B340B0006C72588010050290A000B6AFDB60C00\
AAB70400E9BD010039CC62BC0A00B9E7090058CA0900F6530200FCC307000918\
1312141D0B1A2239071E0A1D1F1F460B02940A520A1501270121141A18163C13\
09161B243D063001262009131C27150909181B233D0686012908241A1B091620\
391E3129471E08230A0D0A182031252B06211D0355290A434301250A0B95340C\
0B95340A1196340D0A1209090A091123150E6A0E033927160E3838342C091CEC\
077C078B1D5A0B0B130A13101A182D211030021E121741121637234E0F270A0B\
53370C0B53370A115437100A0F09090A0E0B1B1120013C20391034171D272509\
0A09AE078907981D67140B130A13101A18072D211030021E121741121637234E\
0F032F0A0B47370C0B47370A1148370D0A1209090A0A0A0C0C171021023B2039\
1032062E2725090A131A030E7B03020D031710032A0503381C0603064502120D\
121443100307191803130D4A0D0A0E030A2E0E31081D73350E202E5F3C182605\
26321617173A3E25B57D271A091816061A149620161BA024381A0321152E0E14\
12030C2A145F1826010526012F1601140E033A3E260E01120409180706161414\
46541912A024381A03210E2E0E1412030C2A14510F26010526012F160114173A\
3E252D696A1D0F01081807061814147B07C4070061031C03031003180214031A\
0104021D02160303130302070C03030F0403081004030A0A04040B05080B0904\
090A030320010203080C03020F0611030E0A04040F04040F04040A0A04030E04\
030E03030A0A04040F04040A06040804080C040F05130405058F040F0414050C\
0B03030E040317010402080C04050601070104030905050A010402080A030308\
0A0103020E010302080507040703010110030D11022215045D04030F0413040C\
0B03030E04031703030A0E040706010703040B05080A03030A0A03040B0A0303\
0E03030A050904070301010A04090A03040B0F051105090106800E0417031403\
15040311030D010C03040F02030C0B080B0C090C04054D091F031D0D110C0D03\
15041D03180403110503070C0303070C041402140404070C0104030F0104030E\
030307010902030E02030D02030A0A03030E04030E03030A0902030E02030A06\
04080D0E75230D09020F031378230D09020F03137D230D094A3709090A041404\
0E04041503040F04040F01030423031402170303080D040E0F03150316010304\
07010B04040F02030F01041602220503F28290941A08110B0A0B0E060705050B\
110C0209040F030C0F041A030417040407010B010203130303080E04030F0303\
1103040A05010D03031804040D0F0409850313880313F71C140910031A031402\
1903021003140217030408020B0204080C04041803040F03130402D68F9D8C01\
191A08110B0A0B100B070A0B100C0209040F030C0F041A030417040407010B01\
0203130303080E04030F03031103040A05010D03031804040D110F067903137C\
0313B9470B1009090F0103031604140319030211031402170304080E0403060D\
04031803040F03130402";
